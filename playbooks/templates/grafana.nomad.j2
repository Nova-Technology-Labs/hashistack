job "grafana" {
  datacenters = ["{{ workspace }}"]
  type = "service"

  group "monitoring" {
    count = 1

    network {
      mode = "bridge"
      port "http" {
        to     = 3000
      }
      port "https" {
        to     = 3001
      }
      dns {
        servers = {{ ovh_master_servers|map(attribute='private_ip')|list|to_json }}
        searches = ["coffreo.cc"]
      }
    }

    service {
      name = "grafana"
      tags = ["monitoring","prometheus"]
      port = "http"

      connect {
        sidecar_service {
          proxy {
            upstreams {
              destination_name = "loki"
              local_bind_port = 3100
            }
            upstreams {
              destination_name = "prometheus"
              local_bind_port = 9090
            }
            upstreams {
              destination_name = "tempo"
              local_bind_port = 3400 
            }
          }
        }
      }

      check {
        name = "Grafana HTTP"
        type = "http"
        path = "/api/health"
        interval = "8s"
        timeout  = "5s"

        check_restart {
          limit           = 2
          grace           = "60s"
          ignore_warnings = false
        }
      }
    }


    restart {
      attempts = 2
      interval = "30m"
      delay    = "15s"
      mode     = "fail"
    }

    ephemeral_disk {
      size = 300
    }

    task "grafana" {
      driver = "docker"

      config {
        image = "grafana/grafana:7.5.1"
        ports = ["http", "https"]
      }

      env {
        GF_LOG_LEVEL          = "DEBUG"
        GF_LOG_MODE           = "console"
        GF_SERVER_HTTP_PORT   = "${NOMAD_PORT_http}"
        GF_PATHS_PROVISIONING = "/local/grafana/provisioning"
      }

      template {
        data        = <<EOTC
apiVersion: 1
datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://localhost:9090
    jsonData:
    exemplarTraceIdDestinations:
    - name: traceID
      datasourceUid: tempo
  - name: Tempo
    type: tempo
    access: proxy
    url: http://localhost:3400
    uid: tempo
  - name: Loki
    type: loki
    access: proxy
    url: http://localhost:3100
    jsonData:
      derivedFields:
        - datasourceUid: tempo
          matcherRegex: (?:traceID|trace_id)=(\w+)
          name: TraceID
          url: $$${__value.raw}
EOTC
        destination = "/local/grafana/provisioning/datasources/ds.yaml"
      }


      artifact {
        source      = "https://raw.githubusercontent.com/cyriltovena/observability-nomad/main/provisioning/dashboard.yaml"
        mode        = "file"
        destination = "/local/grafana/provisioning/dashboards/dashboard.yaml"
      }
      artifact {
        source      = "https://raw.githubusercontent.com/cyriltovena/observability-nomad/main/provisioning/dashboard.json"
        mode        = "file"
        destination = "/local/grafana/dashboards/tns.json"
      }

      resources {
        cpu    = 500
        memory = 2048
      }

          }
  }
}
