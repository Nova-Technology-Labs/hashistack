---
- hosts: localhost
  become: false
  gather_facts: false

  vars:
    src_terraform_dir: "{{ (playbook_dir + '/../') | realpath }}/terraform/core"
    terraform_dir: "{{ workspace_terraform_dir }}/core"

    ssh_private_key_file: "{{ workspace_secrets_dir }}/{{ workspace }}.key"
    ssh_public_key_file: "{{ ssh_private_key_file }}.pub"

    ready_host_name: "{{ workspace }}"

    ready_host_vars_dir: "{{ host_vars_dir }}/{{ ready_host_name }}"
    ready_tf_host_vars_file: "{{ ready_host_vars_dir }}/tf_core.yml"
    ready_srv_host_vars_file: "{{ ready_host_vars_dir }}/system.yml"

    block_marker: >-
      # {mark}--playbooks/tf_core.yml--{{ workspace }}

  tasks:
    - import_tasks: "{{ playbook_dir }}/inc/_tf_sanity_checks.yml"

    - name: APPLY - Create a dedicated keypair
      openssh_keypair:
        path: "{{ ssh_private_key_file }}"
        type: ed25519
      when: tf_action == 'apply'

    - name: DESTROY - Remove clan definition from inventory group
      blockinfile:
        path: "{{ ansible_pwd }}/hosts"
        state: absent
        marker: "{{ block_marker }}"
      when: tf_action == 'destroy'

    - name: DESTROY - Remove clan configuration from ssh config file
      blockinfile:
        path: "{{ ansible_pwd }}/ssh.cfg"
        state: absent
        marker: "{{ block_marker }}"
      when: tf_action == 'destroy'

    - name: Copy terraform sources    # noqa risky-file-permissions
      copy:
        src: "{{ src_terraform_dir }}"
        dest: "{{ workspace_terraform_dir }}"
      when: tf_action == 'apply'

    - name: COMMON - Do Terraform
      community.general.terraform:
        project_path: "{{ terraform_dir }}"
        state: "{{ (tf_action == 'destroy') | ternary('absent', 'present') }}"
        force_init: true
        workspace: "{{ workspace }}"
        variables:
          ssh_public_key_file: "{{ ssh_public_key_file }}"
      register: tf_result
      tags: tf

    - name: APPLY - Terraform output extract
      set_fact:
        controller_ipv4: "{{ tf_result.outputs.controller_ipv4.value }}"
        controller_ipv6: "{{ tf_result.outputs.controller_ipv6.value }}"
        raw_ssh_user: "{{ tf_result.outputs.raw_ssh_user.value }}"
        ready_ssh_user: "{{ tf_result.outputs.ready_ssh_user.value }}"
        masters_ipv4: "{{ tf_result.outputs.masters_ipv4.value }}"
        minions_ipv4: "{{ tf_result.outputs.minions_ipv4.value }}"
      when: tf_action == 'apply'

    - name: APPLY - Add raw and ready host definitions to ssh config
      blockinfile:
        path: "{{ ansible_pwd }}/ssh.cfg"
        state: present
        create: true
        mode: 0640
        marker: "{{ block_marker }}"
        block: |
          {{ lookup('template', '_tf_core_ssh_cfg.j2') }}
      when: tf_action == 'apply'

    - name: APPLY - Add raw and ready host definitions to inventory group
      blockinfile:
        path: "{{ ansible_pwd }}/hosts"
        state: present
        create: true
        mode: 0640
        marker: "{{ block_marker }}"
        block: |
          {{ lookup('template', '_tf_core_inventory.j2') }}
      when: tf_action == 'apply'

    - name: APPLY - Temporary override ssh config for setup
      copy:
        dest: "{{ workspace_group_vars_dir }}/tf_core.tmp.yml"
        mode: 0640
        content: |-
          ---
          ansible_user: "{{ raw_ssh_user }}"
      when: tf_action == 'apply'

    - name: APPLY - Render group vars
      template:
        src: "_tf_core_workspace_vars.yml.j2"
        dest: "{{ workspace_group_vars_dir }}/tf_core.yml"
        mode: 0640
      when: tf_action == 'apply'

    - name: APPLY - Create masters host vars directories
      file:
        path: "{{ workspace_host_vars_dir }}/{{ workspace }}-master-0{{ _current_index + 1 }}"
        mode: 0750
        state: directory
      when: tf_action == 'apply'
      loop: "{{ masters_ipv4 }}"
      loop_control:
        loop_var: "_current_ip"
        index_var: "_current_index"

    - name: APPLY - Create minions host vars directories
      file:
        path: "{{ workspace_host_vars_dir }}/{{ workspace }}-minion-0{{ _current_index + 1 }}"
        mode: 0750
        state: directory
      when: tf_action == 'apply'
      loop: "{{ minions_ipv4 }}"
      loop_control:
        loop_var: "_current_ip"
        index_var: "_current_index"
    - name: APPLY - Create controller host vars directory
      file:
        path: "{{ workspace_host_vars_dir }}/{{ workspace }}-controller"
        mode: 0750
        state: directory
      when: tf_action == 'apply'


    - name: APPLY - Render masters host vars
      copy:
        dest: "{{ workspace_host_vars_dir }}/{{ workspace }}-master-0{{ _current_index + 1 }}/tf_core.yml"
        mode: 0640
        content: |-
          ---
          public_ipv4: "{{ _current_ip }}"
      when: tf_action == 'apply'
      loop: "{{ masters_ipv4 }}"
      loop_control:
        loop_var: "_current_ip"
        index_var: "_current_index"

    - name: APPLY - Render minions host vars
      copy:
        dest: "{{ workspace_host_vars_dir }}/{{ workspace }}-minion-0{{ _current_index + 1 }}/tf_core.yml"
        mode: 0640
        content: |-
          ---
          public_ipv4: "{{ _current_ip }}"
      when: tf_action == 'apply'
      loop: "{{ minions_ipv4 }}"
      loop_control:
        loop_var: "_current_ip"
        index_var: "_current_index"

    - name: APPLY - Render controller host vars
      template:
        src: "_tf_core_controller_vars.j2"
        dest: "{{ workspace_host_vars_dir }}/{{ workspace }}-controller/tf_core.yml"
        mode: 0640
      when: tf_action == 'apply'

    - name: DESTROY - Clean output files
      file:
        path: "{{ _current_garbaged_file }}"
        state: absent
      loop:
        - "{{ workspace_group_vars_dir }}/tf_core.yml"
        - "{{ workspace_group_vars_dir }}/tf_core.tmp.yml"
        - "{{ workspace_secrets_dir }}/unseal.yml"
        - "{{ workspace_secrets_dir }}/root_consul.yml"
        - "{{ workspace_secrets_dir }}/tf_vault_config.yml"
        - "{{ workspace_secrets_dir }}/tf_consul_config.yml"
        - "{{ workspace_secrets_dir }}/ca.cert.key"
        - "{{ workspace_secrets_dir }}/self.cert.key"
        - "{{ workspace_secrets_dir }}/self.cert.pem"
        - "{{ workspace_secrets_dir }}/self.fullchain.cert.pem"
      loop_control:
        loop_var: _current_garbaged_file
      when: tf_action == 'destroy'
